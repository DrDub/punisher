import java.io.*;

public class newDictionary {
protected char[] tape ;
protected char[] tempTape ;
protected String saveLines = "" ;	
protected int pos = 0 ;
protected int temPos = 0 ;
protected int numEspacesWhites = 0 ;
protected char character ;

	/**
	 * leer fichero apertium
	 */
	public void  readFile(String direccion){	/** end readFile **/
		
		
		try {	/** begin hilo de lectura de fichero **/
			
			File file = new File (direccion);
			FileReader fr = new FileReader (file);
			BufferedReader br = new BufferedReader(fr);
			String line = br.readLine();
			
			
				while(line != null){	/** begin while **/
					saveLines += line ;
					line = "" ;
					line = br.readLine();
					
				}	/** end while **/
			
			
    	}catch (IOException ex) { System.out.println("\nfile not found\n"); }	/** end hilo de lectura de fichero **/
		
		
	}	/** end readFile **/
	
	/**
	 * guardar palabras en fichero(dictionary)
	 */
	
	void prepareTape(){	/** begin prepareTape **/
		try{
			pos = 0 ;
			putCharacters(tempTape, pos);		
		}catch(Exception ev){}	
	
	}	/**  **/
	
	/**
	 *  extraer extension fichero
	 */
	
	void extractExtension(int longitude, int pos){	/** begin extractExtension **/
		
	}	/** end extractExtension **/
	
	/**
	 *  extraer palabras
	 */
	
	void extractChars(char tape){	/** begin extractWords **/
		try{ 
			
		}catch(Exception e){ System.out.print(""); }
	}	/** end extracWords **/
	
	/**
	 *  quitar espacios en blancos
	 *  saca los caracteres de la cinta temporal y los introduce en la cinta destino sin espacios en blanco
	 */
	
	void putCharacters(char tape[], int pos){	/** begin putEspaces **/
		
		character = tape[pos] ;
		
		if( character != ' '){	/** begin if-' ' **/
			tempTape[pos] =  character ;
			System.out.print(tape[pos]) ;
			pos += 1 ;
			putCharacters(tape,pos);
			
		}	/** end if-' ' **/
		else{
			pos += 1 ;
			putCharacters(tape,pos);
		}
		
		
	}	/** end putEspaces **/
	
	/**
	 * iniciar cinta(tape)
	 * crea las dimensiones de los arreglos de la cinta tape[] y tempTape[]
	 */
	
	void initTape(){	/** begin initTape **/
		
		tempTape = new char[saveLines.length()];
		tempTape = saveLines.toCharArray();
		
		try{ 
			pos = 0 ;
			countEspacesWhites(tempTape, pos);	/** cuenta los espacios en blanco **/
			
		}catch(Exception e){ System.out.print("Finalizo inicializacion de la cinta\n"); }
		
		
		tape = new char[(saveLines.length() - numEspacesWhites)];
		
		
	}	/** end initTape **/
	
	/**
	 *  contar numero de espacios en blancos
	 *  cuenta el numero de espacios en blancos
	 */
	
	void countEspacesWhites(char tempTape[], int pos){
		
		if( tape[pos] == ' '){	/** begin si el caracter es un espacio en blanco **/
			numEspacesWhites += 1 ;
			pos += 1 ;
			countEspacesWhites(tempTape, pos);
			
		}	/** end si el caracter es un espacio en blanco **/
		
		else{	/** begin si no hay espacios en blancos **/
			pos += 1 ;
			countEspacesWhites(tempTape, pos);
			
		}	/** end si no hay espacios en blancos **/
		
	}	/** end countEspacesWhites **/
	
	/**
	 * introducir linea de carateres en un array
	 */
	
	void introduceCharacters(){	/** begin introduceCharacters **/
		
		
	}	/** end introduceCharacters **/
	
	/**
	 * @param args
	 */
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		
	}	/** end main **/

}	/** end newDictionary **/
